#!/usr/bin/env node

const pify = require('pify')
const pAll = require('p-all')
const chalk = require('chalk')
const inquirer = require('inquirer')
const fs = require('fs')
const path = require('path')
const meow = require('meow')
const exec = require('child_process').exec
const Ping = require('ping')
const Conf = require('conf')
const logUpdate = require('log-update')
const logSymbols = require('log-symbols')
const Ora = require('ora')

const conf = new Conf()

const INTERVAL = 80

async function main () {
  try {
    const cli = meow(`
      Usage
        $ shadowkeeper ./gui-config.json
      
      Options
        --ping  Ping servers 
    `, {
      flags: {
        ping: {
          type: 'boolean',
        },
      },
    })
    const file = cli.input[0] ? path.resolve(process.cwd(), cli.input[0]) : conf.get('config_file_path')
    if (!file) {
      throw new Error('Please select a config file (gui-config.json) at least once')
    }
    conf.set('config_file_path', file)

    const config = JSON.parse(await pify(fs.readFile)(file, 'utf8'))

    if (cli.flags.ping) {
      return await ping(config)
    }

    socks(config)
      
  } catch (err) {
    console.log(`${chalk.red(err)}`)
    console.log(err.stack)
    process.exit(1)
  }
}

async function socks (json) {
  const { config, port } = await inquirer.prompt([{
    type: 'list',
    name: 'config',
    message: 'choose your server config',
    choices: json.configs.filter((config) => config.remarks).map((config) => config.remarks),
    default: () => {
      return conf.get('last_server_config')
    },
    filter: (remark) => {
      return json.configs.find((config) => config.remarks === remark)
    }
  }, {
    type: 'input',
    name: 'port',
    message: 'type your local port',
    default: (answer) => {
      return conf.get('local_port') || answer.config.local_port || json.localPort
    },
    validate: (value) => {
      return /^\d{1,4}$/.test(value) || 'the local port should be a number between 1-9999'
    }
  }])

  config.local_port = port

  update(config)
  execute(config)
 
  function update (config) {
    conf.set('last_server_config', config.remarks)
    conf.set('local_port', config.local_port)
  }

  function execute (config) {
    const command = `sslocal -s ${config.server} -p ${config.server_port} -k ${config.password} -m ${config.method} -l ${config.local_port}`
    const proc = exec(command)
    console.log(`> ${command}`)
    proc.stdout.on('data', data => console.log(`stdout: ${data}`))
    proc.stderr.on('data', data => console.log(`stderr: ${data}`))
    proc.on('close', code => console.log(`child process close with ${code}`))
  }
}

async function ping (json) {
  const spinner = new Ora()
  const servers = json.configs.map(({ server }) => {
    return {
      host: server,
    }
  })

  const interval = setInterval(render, INTERVAL)

  await pAll(servers.map((server) => {
    return () => Ping.promise.probe(server.host)
      .then((pong) => {
        server.pong = pong
      })
  }), { concurrency: 5 })

  setTimeout(() => {
    process.exit()
  }, INTERVAL)

  function sorter (left, right) {
    const isWaiting = (server) => !server.pong
    const isLoss = (server) => server.pong && !server.pong.alive
    if ((isWaiting(left) && isWaiting(right)) || (isLoss(left) && isLoss(right))) {
      return 0
    }
    if (isLoss(left) || isLoss(right)) {
      return isLoss(left) ? 1 : -1
    }
    if (isWaiting(left) || isWaiting(right)) {
      return isWaiting(left) ? 1 : -1
    }
    return left.pong.avg - right.pong.avg
  }

  function render () {
    const output = servers.sort(sorter).map(({ host, pong }) => {
      if (!pong) {
        return `${spinner.frame()} ${host}: ...`
      }
      if (!pong.alive) {
        return `${logSymbols.error}  ${host}: loss`
      }
      return `${logSymbols.success}  ${host}: ${pong.avg}ms`
    })

    logUpdate('\n' + output.join('\n'))
  }
}

main()
